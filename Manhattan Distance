Given n integer coordinates. The task is to find sum of Manhattan distance between all pairs of coordinates. Answer might be large. Take modulo by  
10^9+7
Manhattan Distance between two points (x1, y1) and (x2, y2) is:
|x1 – x2| + |y1 – y2|
Input Format
First line contains 1≤n≤10^5. Next  n lines contain two integers 1000≤x,y≤1000

Output Format

Sum of Manhattan distance between every pair of point modulo  
10^9+7

Example 1
Input
4
-1 5
1 6
3 5
2 3
Output
22
Explanation
Distance of { 1, 6 }, { 3, 5 }, { 2, 3 } from { -1, 5 } are 3, 4, 5 respectively.

Therefore, sum = 3 + 4 + 5 = 12

Distance of { 3, 5 }, { 2, 3 } from { 1, 6 } are 3, 4 respectively. Therefore, sum = 12 + 3 + 4 = 19

Distance of { 2, 3 } from { 3, 5 } is 3. Therefore, sum = 19 + 3 = 22.

##########################################################################################################

#include <iostream>
#include <vector>
#include <algorithm>
using namespace std;

const int MOD = 1000000007;

int main() {
    // your code goes here
    static 
    int n;
    cin >>n;
    int j = n; // for looping x and y elements
    vector<int> x(n),y(n);
    int idxx = 0,idxy = 0;
    while(n--){
        cin >> x[idxx++];
        cin >> y[idxy++];
    }
    // for(int i=0;i<j;i++){
    //     cout << x[i]<<" "<<y[i]<<endl;
    // }
    sort(x.begin(),x.end());
    sort(y.begin(),y.end());
    int total_x_sum = 0, total_y_sum = 0;
    for(int i=0;i<j;i++){
        total_x_sum += x[i];
        total_y_sum += y[i];
    }
    // cout << total_x_sum << " "<< total_y_sum;
    long long Xdiff=0, Ydiff=0;
    for(int i=0;i<j;i++){
        total_x_sum -= x[i];
        total_y_sum -= y[i];
        Xdiff += (total_x_sum - (j-1-i)*x[i]*1LL) % MOD;
        Ydiff += (total_y_sum - (j-1-i)*y[i]*1LL) % MOD;
    }
    cout << (Xdiff + Ydiff) % MOD;
    
    return 0;
}
